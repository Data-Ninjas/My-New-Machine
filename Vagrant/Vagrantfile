# Vagrant 1.6 will have native windows support, rendering this obsolete
if !Vagrant.has_plugin?('vagrant-windows')
	puts "vagrant-windows missing, please install the vagrant-windows plugin!"
	puts "Run this command in your terminal:"
	puts "vagrant plugin install vagrant-windows"
	exit 1
end

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

	# Every Vagrant virtual environment requires a box to build off of.
	config.vm.box = "base"

	# The url from where the 'config.vm.box' box will be fetched if it
	# doesn't already exist on the user's system.
	# config.vm.box_url = "http://domain.com/path/to/above.box"
	# config.vm.box_url = "./vagrant-windows2008r2.box"

	# Windows Specific Config
	config.vm.guest = :windows
	config.windows.halt_timeout = 20

	# PowerShell Remote Manaagement -- Admin user name and password
	# config.winrm.username = "vagrant"
	# config.winrm.password = "vagrant"
	# config.winrm.host = 
	# config.winrm.port = 
	# config.winrm.guest_port

	config.vm.synced_folder ".", "/vagrant_data", type: "smb"

	# Use this to run local or remote scripts for provisioning
	# config.vm.provision "shell", path: "local-setup.cmd"
	# Run the chocolatey install, then push the tools over that we need on the VM

	# Create a private network, which allows host-only access to the machine using a specific IP.
	config.vm.network "private_network", ip: "192.168.33.10"

	# Create a forwarded port mapping which allows access to a specific port
	# within the machine from a port on the host machine. In the example below,
	# accessing "localhost:8080" will access port 80 on the guest machine.
	# config.vm.network "forwarded_port", guest: 80, host: 8080
	
	# Port forward WinRM and RDP
	config.vm.network :forwarded_port, guest: 5985, host: 5985, id: "winrm", auto_correct: true
	#config.vm.network :forwarded_port, guest: 3389, host: 3389

	# Create a public network, which generally matched to bridged network.
	# Bridged networks make the machine appear as another physical device on
	# your network.
	# config.vm.network "public_network"
	
	# Ensure that all networks are set to private
	config.windows.set_work_network = true

	# Provider-specific configuration so you can fine-tune various
	# backing providers for Vagrant. These expose provider-specific options.
	# Example for VirtualBox:
	#
	config.vm.provider "virtualbox" do |vb|
		# Don't boot with headless mode
		vb.gui = true
	
		# Use VBoxManage to customize the VM. For example to change memory:
		vb.customize ["modifyvm", :id, "--memory", 2048]
		vb.customize ["modifyvm", :id, "--cpus", 2]
	 end

	# Enable provisioning with Puppet stand alone.  Puppet manifests
	# are contained in a directory path relative to this Vagrantfile.
	# You will need to create the manifests directory and a manifest in
	# the file default.pp in the manifests_path directory.
	#
	# config.vm.provision "puppet" do |puppet|
	#   puppet.manifests_path = "manifests"
	#   puppet.manifest_file  = "site.pp"
	# end

	# Enable provisioning with chef solo, specifying a cookbooks path, roles
	# path, and data_bags path (all relative to this Vagrantfile), and adding
	# some recipes and/or roles.
	#
	# config.vm.provision "chef_solo" do |chef|
	#   chef.cookbooks_path = "../my-recipes/cookbooks"
	#   chef.roles_path = "../my-recipes/roles"
	#   chef.data_bags_path = "../my-recipes/data_bags"
	#   chef.add_recipe "mysql"
	#   chef.add_role "web"
	#
	#   # You may also specify custom JSON attributes:
	#   chef.json = { :mysql_password => "foo" }
	# end
end
